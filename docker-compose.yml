services:
  mysql:
    image: mysql:8.0  
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=070809az
    ports:
      - "3307:3306"
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - book_service_network

  book-service:
    build: /bookService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    container_name: book-service
    ports: 
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - book_service_network

  mongo:
    image: mongo:8.0
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 070809az
      MONGO_INITDB_DATABASE: review_db
    ports:
      - "27018:27017"
    volumes: 
      - ./docker/mongodb/data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    networks:
     - review_service_network
      
  review-service:
    container_name: review-service
    build: /reviewService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8081:8080"
    depends_on:
      mongo: 
        condition: service_healthy
    networks:
      - book_service_network
      - review_service_network

  api-gateway:
    container_name: api-gateway
    build: /apiGateway
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "9000:8080"
    depends_on:
      book-service: 
        condition: service_started
      review-service: 
        condition: service_started
    networks:
      - book_service_network
      - review_service_network

networks: 
  book_service_network:
  review_service_network:
